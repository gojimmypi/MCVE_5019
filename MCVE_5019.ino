#include <ESP8266HTTPClient.h>
#include <ESP8266WiFi.h>

#include "GlobalDefine.h"
#include "WiFiHelper.h"
#include "htmlHelper.h"

BearSSL::WiFiClientSecure  client;
String DasboardDataFile = DASHBOARD_DEFAULT_DATA; // set a default, but based on mac address we might determine a user-specific value
const int httpPort = 443;

void GetDashboardDataFile() {
	// the files are expected to be static JSON, pre-generated by process at server (we don't want to wait on generation of files for display!)
	DasboardDataFile = String(DASHBOARD_KEY) + wifiMacAddress() + ".json";
	delay(2000);
	HEAP_DEBUG_PRINT("Heap (before htmlExists) "); HEAP_DEBUG_PRINTLN(DEFAULT_DEBUG_MESSAGE);
	HTTP_DEBUG_PRINT("Checking for DasboardDataFile = "); HTTP_DEBUG_PRINTLN(DasboardDataFile);
	if (!htmlExists(DasboardDataFile)) {
		Serial.println(DasboardDataFile + " not found, using default");
		DasboardDataFile = "2134.json";
	}
	HEAP_DEBUG_PRINT("Heap (after htmlExists) "); HEAP_DEBUG_PRINTLN(DEFAULT_DEBUG_MESSAGE);
	// TODO - if the file does not exist, then use default.
}




//*******************************************************************************************************************************************
// setupWiFi
//*******************************************************************************************************************************************
int setupWiFi() {
	SET_HEAP_MESSAGE("setupWiFi Heap = ");
	HEAP_DEBUG_PRINTLN("Heap (setupWiFi begin)");

#ifdef ARDUINO_ARCH_ESP8266
	client.setInsecure(); // TODO fix this. Needed for BearSSL
#endif

#ifdef ARDUINO_ARCH_ESP32
						  //client.setInsecure(); // not implemented in ESP32
#endif
	HEAP_DEBUG_PRINTLN("htmlSetClient(&client)...");
	HEAP_DEBUG_PRINTLN(DEFAULT_DEBUG_MESSAGE);
	htmlSetClient(&client);
	HEAP_DEBUG_PRINTLN(DEFAULT_DEBUG_MESSAGE);

	WIFI_DEBUG_PRINTLN("calling wifiConnect...");
	wifiConnect(50);
	HEAP_DEBUG_PRINTLN(DEFAULT_DEBUG_MESSAGE);


	WIFI_DEBUG_PRINTLN("WiFi connected. My IP address:");
	WIFI_DEBUG_PRINTLN("");
	WIFI_DEBUG_PRINTLN(WiFi.localIP());
	if (confirmedInternetConnectivity(DASHBOARD_HOST) == 0) {
		Serial.println("Successfully connected!");
	}

	// testSSL();

	HEAP_DEBUG_PRINT("Heap (setupWiFi end); "); HEAP_DEBUG_PRINTLN(DEFAULT_DEBUG_MESSAGE);

	return 0;
}

// *******************************************************************************************
void setup()
// *******************************************************************************************
{
	delay(500);
	Serial.begin(19200);
	Serial.println("MCVE 5029 V1");
	setupWiFi();
	
	GetDashboardDataFile();
}

// *******************************************************************************************
void loop()
// *******************************************************************************************
{
	client.setInsecure();
	if (!client.connect(DASHBOARD_HOST, httpPort)) {
		Serial.println("connection failed; need to implement wait clear"); // TODO 
		Serial.println("");
		return;
	}
	else {
		Serial.println("Success!"); // We never get here if first needing to accept terms and conditions, instead: error 
	}
	yield();
	delay(20000); 

}
